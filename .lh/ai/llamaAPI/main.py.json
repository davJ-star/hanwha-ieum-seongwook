{
    "sourceFile": "ai/llamaAPI/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1737031186900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1737031186900,
            "name": "Commit-0",
            "content": "from fastapi import FastAPI\r\nimport requests\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n# Define a request model for the prompt input\r\nclass PromptRequest(BaseModel):\r\n    model: str\r\n    prompt: str\r\n\r\n# Endpoint to generate text using Llama3 API\r\n@app.post(\"/generate\")\r\nasync def generate_text(request: PromptRequest):\r\n    url = \"http://localhost:11434/api/generate\"  # Replace with your Llama3 API URL\r\n    headers = {'Content-Type': 'application/json'}\r\n    \r\n    data = {\r\n        \"model\": request.model,\r\n        \"prompt\": request.prompt\r\n    }\r\n    \r\n    response = requests.post(url, json=data, headers=headers)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json()\r\n    else:\r\n        return {\"error\": f\"Request failed with status code: {response.status_code}\"}\r\n\r\n# Endpoint to chat with Llama3 API\r\n@app.post(\"/chat\")\r\nasync def chat_with_llama(request: PromptRequest):\r\n    url = \"http://localhost:11434/api/chat\"  # Replace with your Llama3 API URL\r\n    headers = {'Content-Type': 'application/json'}\r\n    \r\n    data = {\r\n        \"model\": request.model,\r\n        \"messages\": [{\"role\": \"user\", \"content\": request.prompt}]\r\n    }\r\n    \r\n    response = requests.post(url, json=data, headers=headers)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json()\r\n    else:\r\n        return {\"error\": f\"Request failed with status code: {response.status_code}\"}\r\n\r\n# Run the application with 'uvicorn filename:app --reload'\r\n"
        }
    ]
}